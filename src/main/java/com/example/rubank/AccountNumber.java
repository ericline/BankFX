package com.example.rubank;
import util.Random;
/**
 AccountNumber class to contain what branch, type,
 and number the account is.
 @author Eric Lin, Anish Mande
 */
public class AccountNumber implements Comparable<AccountNumber> {
    private static final int SEED = 9999; //for a fix sequence of random numbers.
    private static final Random random = new Random(SEED);
    private Branch branch;
    private AccountType type;
    private String number; //a 4-digit number generated by the Random object

    /**
     * Constructs an AccountNumber with a branch, account type, and a deterministic number.
     * Uses a fixed Random(SEED) and profile information to ensure consistency.
     * @param branch the branch associated with this account number
     * @param type the type of account (e.g., Checking, Savings)
     */
    public AccountNumber(Branch branch, AccountType type) {
        this.branch = branch;
        this.type = type;
        generateNumber();
    }

    /**
     * Constructs an AccountNumber by parsing an existing account number string.
     * Extracts the branch code, account type code, and 4-digit number.
     *
     * @param accountNumberStr the full 9-digit account number string
     */
    public AccountNumber(String accountNumberStr) {
        String branchCode = accountNumberStr.substring(0, 3);
        String typeCode = accountNumberStr.substring(3, 5);
        this.number = accountNumberStr.substring(5);
        this.type = AccountType.fromCode(typeCode);
        this.branch = Branch.fromCode(branchCode);
    }

    /**
     * Generates a unique 4-digit account number from the sequence.
     * This method should be called only after validating all input tokens.
     */
    public void generateNumber() {
        if (this.number == null) {
            int serial = random.nextInt(SEED);
            this.number = String.format("%04d", serial);
        }
    }

    /**
     * Retrieves the branch associated with this account number.
     * @return the branch of the account
     */
    public Branch getBranch() {
        return branch;
    }

    /**
     * Retrieves the account type.
     * @return the type of account
     */
    public AccountType getType() {
        return type;
    }

    /**
     * Retrieves the 4-digit account number.
     * @return the unique 4-digit account number
     */
    public String getNumber() {
        return number;
    }

    /**
     * Compares this account number to another account number.
     * @param other the account number to compare to
     * @return a negative integer, zero, or a positive integer as this account number
     *         is less than, equal to, or greater than the specified account number
     */
    @Override
    public int compareTo(AccountNumber other) {
        return this.toString().compareTo(other.toString());
    }

    /**
     * Determines whether this account number is equal to another object.
     * Two account numbers are considered equal if their numerical values are the same.
     * @param obj the object to compare
     * @return true if both account numbers are identical, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (obj == null || getClass() != obj.getClass()) {
            return false;
        }
        AccountNumber other = (AccountNumber) obj;
        return this.getNumber().equals(other.getNumber());
    }

    /**
     * Returns a formatted 9-digit string representation of the account number.
     * The format is: [branch code][account type code][4-digit number]
     * @return a 9-digit formatted account number string
     */
    @Override
    public String toString() {
        return String.format("%s%s%s", branch.getCode(), type.getCode(), number);
    }
}
